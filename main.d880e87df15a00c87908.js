webpackJsonp([1],{100:function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(11),o=r.n(n),c=r(95),u=r.n(c),a=r(52),i=r(94),s=r(96),_=(r.n(s),r(93)),p=function(e){u.a.render(o.a.createElement(s.AppContainer,null,o.a.createElement(a.a,{store:i.a},o.a.createElement(e,null))),document.getElementById("root"))};p(_.a);!function(){"undefined"!=typeof __REACT_HOT_LOADER__&&__REACT_HOT_LOADER__.register(p,"render","D:/Projects/React/react-redux-template/src/index.js")}()},101:function(e,t,r){"use strict";var n=r(51),o=r(99),c=r.i(n.d)({counter:o.a}),u=c;t.a=u;!function(){"undefined"!=typeof __REACT_HOT_LOADER__&&(__REACT_HOT_LOADER__.register(c,"rootReducer","D:/Projects/React/react-redux-template/src/reducers/index.js"),__REACT_HOT_LOADER__.register(u,"default","D:/Projects/React/react-redux-template/src/reducers/index.js"))}()},104:function(e,t,r){t=e.exports=r(53)(void 0),t.push([e.i,"",""])},105:function(e,t,r){t=e.exports=r(53)(void 0),t.push([e.i,".counter-title{color:red}",""])},227:function(e,t,r){var n=r(104);"string"==typeof n&&(n=[[e.i,n,""]]);r(92)(n,{});n.locals&&(e.exports=n.locals)},228:function(e,t,r){var n=r(105);"string"==typeof n&&(n=[[e.i,n,""]]);r(92)(n,{});n.locals&&(e.exports=n.locals)},93:function(e,t,r){"use strict";function n(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function c(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var u=r(11),a=r.n(u),i=r(227),s=(r.n(i),r(98)),_=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),p=function(e){function t(){return n(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return c(t,e),_(t,[{key:"render",value:function(){return a.a.createElement("div",{style:{textAlign:"center"}},a.a.createElement(s.a,null))}}]),t}(u.Component),l=p;t.a=l;!function(){"undefined"!=typeof __REACT_HOT_LOADER__&&(__REACT_HOT_LOADER__.register(p,"App","D:/Projects/React/react-redux-template/src/app.js"),__REACT_HOT_LOADER__.register(l,"default","D:/Projects/React/react-redux-template/src/app.js"))}()},94:function(e,t,r){"use strict";var n=r(51),o=r(221),c=r.n(o),u=r(222),a=r.n(u),i=r(101),s={counter:0},_=r.i(n.b)(a.a,c.a),p=r.i(n.c)(i.a,s,_),l=p;t.a=l;!function(){"undefined"!=typeof __REACT_HOT_LOADER__&&(__REACT_HOT_LOADER__.register(s,"initialState","D:/Projects/React/react-redux-template/src/store.js"),__REACT_HOT_LOADER__.register(_,"middleware","D:/Projects/React/react-redux-template/src/store.js"),__REACT_HOT_LOADER__.register(p,"store","D:/Projects/React/react-redux-template/src/store.js"),__REACT_HOT_LOADER__.register(l,"default","D:/Projects/React/react-redux-template/src/store.js"))}()},97:function(e,t,r){"use strict";r.d(t,"a",function(){return n}),r.d(t,"b",function(){return o}),r.d(t,"c",function(){return c});var n=function(){return{type:"INCREMENT"}},o=function(){return{type:"DECREMENT"}},c=function(){return{type:"RESET"}};!function(){"undefined"!=typeof __REACT_HOT_LOADER__&&(__REACT_HOT_LOADER__.register(n,"increment","D:/Projects/React/react-redux-template/src/components/counter/counter.action.js"),__REACT_HOT_LOADER__.register(o,"decrement","D:/Projects/React/react-redux-template/src/components/counter/counter.action.js"),__REACT_HOT_LOADER__.register(c,"reset","D:/Projects/React/react-redux-template/src/components/counter/counter.action.js"))}()},98:function(e,t,r){"use strict";function n(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function c(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var u=r(11),a=r.n(u),i=r(52),s=r(228),_=(r.n(s),r(97)),p=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),l=function(e){return{counter:e.counter}},f=function(e){return{increment:function(){return e(r.i(_.a)())},decrement:function(){return e(r.i(_.b)())},reset:function(){return e(r.i(_.c)())}}},E=function(e){function t(){return n(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return c(t,e),p(t,[{key:"render",value:function(){var e=this.props,t=e.counter,r=e.increment,n=e.decrement,o=e.reset;return a.a.createElement("div",null,a.a.createElement("h1",{className:"counter-title"},"Counter: ",t),a.a.createElement("button",{onClick:r},"Increment"),a.a.createElement("br",null),a.a.createElement("button",{onClick:n},"Decrement"),a.a.createElement("br",null),a.a.createElement("button",{onClick:o},"Reset"))}}]),t}(u.Component),R=r.i(i.b)(l,f)(E);t.a=R;!function(){"undefined"!=typeof __REACT_HOT_LOADER__&&(__REACT_HOT_LOADER__.register(l,"mapStateToProps","D:/Projects/React/react-redux-template/src/components/counter/counter.component.js"),__REACT_HOT_LOADER__.register(f,"mapDispatchToProps","D:/Projects/React/react-redux-template/src/components/counter/counter.component.js"),__REACT_HOT_LOADER__.register(E,"Counter","D:/Projects/React/react-redux-template/src/components/counter/counter.component.js"),__REACT_HOT_LOADER__.register(R,"default","D:/Projects/React/react-redux-template/src/components/counter/counter.component.js"))}()},99:function(e,t,r){"use strict";var n=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;switch(arguments[1].type){case"INCREMENT":return e+1;case"DECREMENT":return e-1;case"RESET":return 0;default:return e}},o=n;t.a=o;!function(){"undefined"!=typeof __REACT_HOT_LOADER__&&(__REACT_HOT_LOADER__.register(n,"counter","D:/Projects/React/react-redux-template/src/components/counter/counter.reducer.js"),__REACT_HOT_LOADER__.register(o,"default","D:/Projects/React/react-redux-template/src/components/counter/counter.reducer.js"))}()}},[100]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,