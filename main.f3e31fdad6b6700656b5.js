webpackJsonp([1],{'../node_modules/css-loader/index.js?{"importLoaders":1}!./app.css':function(e,t,n){t=e.exports=n("../node_modules/css-loader/lib/css-base.js")(void 0),t.push([e.i,"",""])},'../node_modules/css-loader/index.js?{"importLoaders":1}!./components/counter/counter.component.css':function(e,t,n){t=e.exports=n("../node_modules/css-loader/lib/css-base.js")(void 0),t.push([e.i,".counter-title{color:red}",""])},"./app.css":function(e,t,n){var r=n('../node_modules/css-loader/index.js?{"importLoaders":1}!./app.css');"string"==typeof r&&(r=[[e.i,r,""]]);var o=n("../node_modules/style-loader/addStyles.js")(r,{});r.locals&&(e.exports=r.locals),r.locals||e.hot.accept('../node_modules/css-loader/index.js?{"importLoaders":1}!./app.css',function(){var t=n('../node_modules/css-loader/index.js?{"importLoaders":1}!./app.css');"string"==typeof t&&(t=[[e.i,t,""]]),o(t)}),e.hot.dispose(function(){o()})},"./app.js":function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function c(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var s=n("../node_modules/react/react.js"),u=n.n(s),a=n("./app.css"),i=(n.n(a),n("./components/counter/counter.component.js")),d=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),_=function(e){function t(){return r(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return c(t,e),d(t,[{key:"render",value:function(){return u.a.createElement("div",{style:{textAlign:"center"}},u.a.createElement(i.a,null))}}]),t}(s.Component),l=_;t.default=l;!function(){"undefined"!=typeof __REACT_HOT_LOADER__&&(__REACT_HOT_LOADER__.register(_,"App","D:/Projects/React/react-redux-template/src/app.js"),__REACT_HOT_LOADER__.register(l,"default","D:/Projects/React/react-redux-template/src/app.js"))}()},"./components/counter/counter.action.js":function(e,t,n){"use strict";n.d(t,"a",function(){return r}),n.d(t,"b",function(){return o}),n.d(t,"c",function(){return c});var r=function(){return{type:"INCREMENT"}},o=function(){return{type:"DECREMENT"}},c=function(){return{type:"RESET"}};!function(){"undefined"!=typeof __REACT_HOT_LOADER__&&(__REACT_HOT_LOADER__.register(r,"increment","D:/Projects/React/react-redux-template/src/components/counter/counter.action.js"),__REACT_HOT_LOADER__.register(o,"decrement","D:/Projects/React/react-redux-template/src/components/counter/counter.action.js"),__REACT_HOT_LOADER__.register(c,"reset","D:/Projects/React/react-redux-template/src/components/counter/counter.action.js"))}()},"./components/counter/counter.component.css":function(e,t,n){var r=n('../node_modules/css-loader/index.js?{"importLoaders":1}!./components/counter/counter.component.css');"string"==typeof r&&(r=[[e.i,r,""]]);var o=n("../node_modules/style-loader/addStyles.js")(r,{});r.locals&&(e.exports=r.locals),r.locals||e.hot.accept('../node_modules/css-loader/index.js?{"importLoaders":1}!./components/counter/counter.component.css',function(){var t=n('../node_modules/css-loader/index.js?{"importLoaders":1}!./components/counter/counter.component.css');"string"==typeof t&&(t=[[e.i,t,""]]),o(t)}),e.hot.dispose(function(){o()})},"./components/counter/counter.component.js":function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function c(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var s=n("../node_modules/react/react.js"),u=n.n(s),a=n("../node_modules/react-redux/es/index.js"),i=n("./components/counter/counter.component.css"),d=(n.n(i),n("./components/counter/counter.action.js")),_=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),l=function(e){return{counter:e.counter}},p=function(e){return{increment:function(){return e(n.i(d.a)())},decrement:function(){return e(n.i(d.b)())},reset:function(){return e(n.i(d.c)())}}},f=function(e){function t(){return r(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return c(t,e),_(t,[{key:"render",value:function(){var e=this.props,t=e.counter,n=e.increment,r=e.decrement,o=e.reset;return u.a.createElement("div",null,u.a.createElement("h1",{className:"counter-title"},"Counter: ",t),u.a.createElement("button",{onClick:n},"Increment"),u.a.createElement("br",null),u.a.createElement("button",{onClick:r},"Decrement"),u.a.createElement("br",null),u.a.createElement("button",{onClick:o},"Reset"))}}]),t}(s.Component),m=n.i(a.b)(l,p)(f);t.a=m;!function(){"undefined"!=typeof __REACT_HOT_LOADER__&&(__REACT_HOT_LOADER__.register(l,"mapStateToProps","D:/Projects/React/react-redux-template/src/components/counter/counter.component.js"),__REACT_HOT_LOADER__.register(p,"mapDispatchToProps","D:/Projects/React/react-redux-template/src/components/counter/counter.component.js"),__REACT_HOT_LOADER__.register(f,"Counter","D:/Projects/React/react-redux-template/src/components/counter/counter.component.js"),__REACT_HOT_LOADER__.register(m,"default","D:/Projects/React/react-redux-template/src/components/counter/counter.component.js"))}()},"./components/counter/counter.reducer.js":function(e,t,n){"use strict";var r=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;switch(arguments[1].type){case"INCREMENT":return e+1;case"DECREMENT":return e-1;case"RESET":return 0;default:return e}},o=r;t.a=o;!function(){"undefined"!=typeof __REACT_HOT_LOADER__&&(__REACT_HOT_LOADER__.register(r,"counter","D:/Projects/React/react-redux-template/src/components/counter/counter.reducer.js"),__REACT_HOT_LOADER__.register(o,"default","D:/Projects/React/react-redux-template/src/components/counter/counter.reducer.js"))}()},"./index.js":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n("../node_modules/react/react.js"),o=n.n(r),c=n("../node_modules/react-dom/index.js"),s=n.n(c),u=n("../node_modules/react-redux/es/index.js"),a=n("./store.js"),i=n("../node_modules/react-hot-loader/index.js"),d=(n.n(i),n("./app.js")),_=function(e){s.a.render(o.a.createElement(i.AppContainer,null,o.a.createElement(u.a,{store:a.a},o.a.createElement(e,null))),document.getElementById("root"))};_(d.default),e.hot.accept("./app.js",function(e){d=n("./app.js"),function(){_(d.default)}()});!function(){"undefined"!=typeof __REACT_HOT_LOADER__&&__REACT_HOT_LOADER__.register(_,"render","D:/Projects/React/react-redux-template/src/index.js")}()},"./reducers/index.js":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n("../node_modules/redux/es/index.js"),o=n("./components/counter/counter.reducer.js"),c=n.i(r.d)({counter:o.a}),s=c;t.default=s;!function(){"undefined"!=typeof __REACT_HOT_LOADER__&&(__REACT_HOT_LOADER__.register(c,"rootReducer","D:/Projects/React/react-redux-template/src/reducers/index.js"),__REACT_HOT_LOADER__.register(s,"default","D:/Projects/React/react-redux-template/src/reducers/index.js"))}()},"./store.js":function(e,t,n){"use strict";var r=n("../node_modules/redux/es/index.js"),o=n("../node_modules/redux-logger/lib/index.js"),c=n.n(o),s=n("../node_modules/redux-thunk/lib/index.js"),u=n.n(s),a=n("./reducers/index.js"),i={counter:0},d=n.i(r.b)(u.a,c.a),_=n.i(r.c)(a.default,i,d);e.hot.accept("./reducers/index.js",function(){var e=n("./reducers/index.js").default;_.replaceReducer(e)});var l=_;t.a=l;!function(){"undefined"!=typeof __REACT_HOT_LOADER__&&(__REACT_HOT_LOADER__.register(i,"initialState","D:/Projects/React/react-redux-template/src/store.js"),__REACT_HOT_LOADER__.register(d,"middleware","D:/Projects/React/react-redux-template/src/store.js"),__REACT_HOT_LOADER__.register(_,"store","D:/Projects/React/react-redux-template/src/store.js"),__REACT_HOT_LOADER__.register(l,"default","D:/Projects/React/react-redux-template/src/store.js"))}()},0:function(e,t,n){n("../node_modules/react-hot-loader/patch.js"),n("../node_modules/webpack-dev-server/client/index.js?http:/localhost:8080"),n("../node_modules/webpack/hot/only-dev-server.js"),e.exports=n("./index.js")}},[0]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,